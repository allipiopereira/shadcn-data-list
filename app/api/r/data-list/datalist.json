{
  "name": "data-list",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "ui/data-list.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst DataListOrientationContext = React.createContext<\n  \"horizontal\" | \"vertical\"\n>(\"horizontal\");\n\nconst dataListVariants = cva(\"overflow-hidden font-normal text-left\", {\n  variants: {\n    orientation: {\n      horizontal: \"flex flex-col\",\n      vertical: \"flex flex-col\",\n    },\n    size: {\n      default: \"text-base\",\n      sm: \"text-sm\",\n      lg: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    orientation: \"horizontal\",\n    size: \"default\",\n  },\n});\n\nexport interface DataListProps\n  extends React.HTMLAttributes<HTMLDListElement>,\n    VariantProps<typeof dataListVariants> {\n  asChild?: boolean;\n}\n\nconst DataList = React.forwardRef<HTMLDListElement, DataListProps>(\n  (\n    { className, orientation = \"horizontal\", size, asChild = false, ...props },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"dl\";\n\n    return (\n      <DataListOrientationContext.Provider value={orientation || \"horizontal\"}>\n        <Comp\n          ref={ref}\n          className={cn(dataListVariants({ orientation, size }), className)}\n          {...props}\n        />\n      </DataListOrientationContext.Provider>\n    );\n  }\n);\nDataList.displayName = \"DataList\";\n\nexport interface DataListItemProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst DataListItem = React.forwardRef<HTMLDivElement, DataListItemProps>(\n  ({ className, ...props }, ref) => {\n    const orientation = React.useContext(DataListOrientationContext);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          className,\n          \"flex\",\n          orientation === \"horizontal\" ? \"items-center\" : \"flex-col\"\n        )}\n        {...props}\n      />\n    );\n  }\n);\nDataListItem.displayName = \"DataListItem\";\n\nexport interface DataListLabelProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst DataListLabel = React.forwardRef<HTMLDivElement, DataListLabelProps>(\n  ({ className, ...props }, ref) => (\n    <dt\n      ref={ref}\n      className={cn(\"text-gray-600 dark:text-gray-400\", className)}\n      {...props}\n    />\n  )\n);\nDataListLabel.displayName = \"DataListLabel\";\n\nexport interface DataListValueProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  className?: string;\n}\n\nconst DataListValue = React.forwardRef<HTMLDivElement, DataListValueProps>(\n  ({ className, ...props }, ref) => (\n    <dd\n      ref={ref}\n      className={cn(\"text-black dark:text-white\", className)}\n      {...props}\n    />\n  )\n);\nDataListValue.displayName = \"DataListValue\";\n\nexport { DataList, DataListItem, DataListLabel, DataListValue };"
    }
  ]
}
